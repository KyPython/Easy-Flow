name: Deploy to Render + Vercel

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: "20.x"
  PYTHON_VERSION: "3.11"

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: rpa-system/package-lock.json

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install backend dependencies
        working-directory: rpa-system
        run: npm ci

      - name: Install frontend dependencies
        working-directory: rpa-system/rpa-dashboard
        run: npm ci

      - name: Install Python dependencies
        working-directory: rpa-system/automation
        run: |
          pip install -r requirements.txt
          pip install -r requirements-test.txt

      - name: Run backend tests
        working-directory: rpa-system
        run: npm run test:backend

      - name: Run frontend tests
        working-directory: rpa-system/rpa-dashboard
        run: npm test -- --coverage --watchAll=false

      - name: Run Python tests
        working-directory: rpa-system/automation
        run: python -m pytest -v

      - name: Build frontend
        working-directory: rpa-system/rpa-dashboard
        run: npm run build

  deploy-backend:
    name: Deploy Backend to Render
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Render
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}
          wait-for-success: true

  deploy-frontend:
    name: Deploy Frontend to Vercel
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: rpa-system/rpa-dashboard/package-lock.json

      - name: Install dependencies
        working-directory: rpa-system/rpa-dashboard
        run: npm ci

      - name: Build frontend
        working-directory: rpa-system/rpa-dashboard
        run: npm run build
        env:
          REACT_APP_SUPABASE_URL: ${{ secrets.REACT_APP_SUPABASE_URL }}
          REACT_APP_SUPABASE_ANON_KEY: ${{ secrets.REACT_APP_SUPABASE_ANON_KEY }}
          REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}
          REACT_APP_FIREBASE_API_KEY: ${{ secrets.REACT_APP_FIREBASE_API_KEY }}
          REACT_APP_FIREBASE_AUTH_DOMAIN: ${{ secrets.REACT_APP_FIREBASE_AUTH_DOMAIN }}
          REACT_APP_FIREBASE_DATABASE_URL: ${{ secrets.REACT_APP_FIREBASE_DATABASE_URL }}
          REACT_APP_FIREBASE_PROJECT_ID: ${{ secrets.REACT_APP_FIREBASE_PROJECT_ID }}
          REACT_APP_FIREBASE_STORAGE_BUCKET: ${{ secrets.REACT_APP_FIREBASE_STORAGE_BUCKET }}
          REACT_APP_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.REACT_APP_FIREBASE_MESSAGING_SENDER_ID }}
          REACT_APP_FIREBASE_APP_ID: ${{ secrets.REACT_APP_FIREBASE_APP_ID }}
          REACT_APP_FIREBASE_MEASUREMENT_ID: ${{ secrets.REACT_APP_FIREBASE_MEASUREMENT_ID }}
          REACT_APP_FIREBASE_VAPID_KEY: ${{ secrets.REACT_APP_FIREBASE_VAPID_KEY }}

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: rpa-system/rpa-dashboard
          vercel-args: "--prod"

  health-check:
    name: Post-deployment Health Check
    needs: [deploy-backend, deploy-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Wait for services to be ready
        run: sleep 60

      - name: Check backend health
        run: |
          curl -f ${{ secrets.BACKEND_URL }}/health || exit 1
          curl -f ${{ secrets.BACKEND_URL }}/api/health/databases || exit 1

      - name: Check frontend accessibility
        run: curl -f ${{ secrets.FRONTEND_URL }} || exit 1

      - name: Check automation service
        run: curl -f ${{ secrets.AUTOMATION_URL }}/health || exit 1

      - name: Notify deployment success
        if: success()
        run: |
          echo "✅ Deployment successful!"
          echo "Backend: ${{ secrets.BACKEND_URL }}"
          echo "Frontend: ${{ secrets.FRONTEND_URL }}"
          echo "Automation: ${{ secrets.AUTOMATION_URL }}"

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "❌ Deployment health check failed!"
          exit 1
