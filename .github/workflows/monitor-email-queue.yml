name: Monitor Email Queue

# Runs hourly and on workflow_dispatch
on:
  schedule:
    - cron: "0 * * * *" # top of every hour
  workflow_dispatch: {}

jobs:
  check-queue:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch email queue stats
        id: stats
        env:
          APP_URL: ${{ secrets.APP_URL }}
          ADMIN_API_SECRET: ${{ secrets.ADMIN_API_SECRET }}
        run: |
          set -euo pipefail
          if [ -z "$APP_URL" ] || [ -z "$ADMIN_API_SECRET" ]; then
            echo "Missing APP_URL or ADMIN_API_SECRET" >&2
            exit 1
          fi
          
          # Determine if we need to skip SSL verification for IP addresses
          curl_opts="-sS"
          if [[ "$APP_URL" =~ ^https://[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            echo "⚠️ Warning: Using IP address with HTTPS. Adding -k flag to skip SSL verification."
            echo "⚠️ Recommendation: Use a proper domain name with valid SSL certificate."
            curl_opts="-sS -k"
          fi
          
          resp=$(curl $curl_opts -H "x-admin-secret: $ADMIN_API_SECRET" "$APP_URL/admin/email-queue-stats" 2>&1) || {
            echo "❌ curl failed with exit code $?"
            echo "Response: $resp"
            resp='{"error":"curl_failed","message":"Failed to fetch email queue stats"}'
          }
          
          echo "resp<<EOF" >> $GITHUB_OUTPUT
          echo "$resp" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Parse pending count
        id: parse
        run: |
          echo "$RESP" >/tmp/resp.json || true
        env:
          RESP: ${{ steps.stats.outputs.resp }}

      - name: Create issue if backlog exceeds threshold
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const resp = (process.env.RESP || '').trim();
            if (!resp) {
              core.setFailed('No response from email stats endpoint');
              return;
            }
            
            let obj = null;
            try { 
              obj = JSON.parse(resp); 
            } catch (e) { 
              // If JSON parsing fails, check if it's a curl error
              if (resp.includes('curl_failed')) {
                core.warning('curl failed to fetch email stats - SSL certificate issue detected');
                core.warning('Consider updating APP_URL to use a domain name with valid SSL certificate');
                return; // Don't fail the workflow for SSL issues
              }
              core.setFailed('Invalid JSON from stats endpoint: ' + e.message); 
              return; 
            }
            
            // Handle curl error responses
            if (obj?.error === 'curl_failed') {
              core.warning('Email queue monitoring failed due to connectivity issues');
              core.warning('SSL certificate may not match the server hostname');
              return;
            }
            
            const pending = obj?.counts?.pending || 0;
            const threshold = 5; // assumption: create issue if > 5 pending
            if (pending > threshold) {
              const title = `[Alert] Email queue backlog: ${pending} pending items`;
              const body = `Email queue stats exceeded threshold (${threshold}).\n\n>>> stats:\n\n\`\`\`json\n${JSON.stringify(obj, null, 2)}\n\`\`\`\n\n---\n*Generated by email queue monitoring workflow*`;
              await github.rest.issues.create({ 
                owner: context.repo.owner, 
                repo: context.repo.repo, 
                title, 
                body, 
                labels: ['alert', 'email-queue'] 
              });
              core.notice('Created alert issue for backlog');
            } else {
              core.info(`Pending (${pending}) <= threshold (${threshold}), no issue created.`);
            }
        env:
          RESP: ${{ steps.stats.outputs.resp }}
