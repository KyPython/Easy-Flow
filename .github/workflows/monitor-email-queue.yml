name: Monitor Email Queue

# Runs hourly and on workflow_dispatch
on:
  schedule:
    - cron: "0 * * * *" # top of every hour
  workflow_dispatch: {}

jobs:
  check-queue:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch email queue stats
        id: stats
        env:
          APP_URL: ${{ secrets.APP_URL }}
          ADMIN_API_SECRET: ${{ secrets.ADMIN_API_SECRET }}
        run: |
          set -euo pipefail
          
          # Validate environment variables
          if [ -z "$APP_URL" ] || [ -z "$ADMIN_API_SECRET" ]; then
            echo "‚ùå Missing required environment variables:" >&2
            echo "APP_URL: ${APP_URL:-'NOT SET'}" >&2
            echo "ADMIN_API_SECRET: ${ADMIN_API_SECRET:+PRESENT}" >&2
            exit 1
          fi
          
          echo "üîç Configuration check:"
          echo "APP_URL is set to: $APP_URL"
          echo "Target endpoint: $APP_URL/admin/email-queue-stats"
          
          # Determine if we need to skip SSL verification for IP addresses
          curl_opts="-sS --max-time 30"
          if [[ "$APP_URL" =~ ^https://[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            echo "‚ö†Ô∏è Warning: Using IP address with HTTPS. Adding -k flag to skip SSL verification."
            echo "‚ö†Ô∏è Recommendation: Use a proper domain name with valid SSL certificate."
            curl_opts="$curl_opts -k"
          fi
          
          # Test basic connectivity first
          echo "üåê Testing basic connectivity to $APP_URL..."
          if ! curl $curl_opts --head --silent --fail "$APP_URL" >/dev/null 2>&1; then
            echo "‚ö†Ô∏è Warning: Base URL connectivity test failed, proceeding anyway..."
          else
            echo "‚úÖ Base URL is accessible"
          fi
          
          # Fetch email queue stats
          echo "üìä Fetching email queue stats..."
          endpoint="$APP_URL/admin/email-queue-stats"
          resp=$(curl $curl_opts -H "x-admin-secret: $ADMIN_API_SECRET" "$endpoint" 2>&1) || {
            exit_code=$?
            echo "‚ùå curl failed with exit code $exit_code"
            echo "Response received: $resp"
            resp='{"error":"curl_failed","message":"Failed to fetch email queue stats","exit_code":'$exit_code'}'
          }
          
          # Check if response is HTML instead of JSON
          if [[ "$resp" == "<!doctype"* ]] || [[ "$resp" == "<!DOCTYPE"* ]] || [[ "$resp" == "<html"* ]]; then
            echo "‚ùå ERROR: Endpoint returned HTML instead of JSON!"
            echo "This indicates APP_URL may be pointing to a frontend site instead of the backend API."
            echo "Response preview: ${resp:0:200}..."
            echo ""
            echo "üí° Solutions:"
            echo "1. Update APP_URL secret to point to your backend API (e.g., https://api.yourdomain.com)"
            echo "2. Ensure the /admin/email-queue-stats endpoint exists on your backend"
            echo "3. Verify ADMIN_API_SECRET is correct for your backend"
            
            resp='{"error":"html_response","message":"Endpoint returned HTML instead of JSON - check APP_URL configuration"}'
          fi
          
          # Check if response is empty
          if [ -z "$resp" ]; then
            echo "‚ùå ERROR: Empty response from endpoint"
            resp='{"error":"empty_response","message":"Empty response from email queue stats endpoint"}'
          fi
          
          # Validate JSON structure if not an error response
          if [[ "$resp" != *'"error":'* ]]; then
            if echo "$resp" | jq . >/dev/null 2>&1; then
              echo "‚úÖ Valid JSON response received"
              echo "üìã Response preview: $(echo "$resp" | jq -c . | head -c 200)..."
            else
              echo "‚ùå ERROR: Response is not valid JSON"
              echo "Response: ${resp:0:500}..."
              resp='{"error":"invalid_json","message":"Response is not valid JSON","raw_response":"'$(echo "$resp" | sed 's/"/\\"/g' | head -c 200)'"}'
            fi
          fi
          
          echo "resp<<EOF" >> $GITHUB_OUTPUT
          echo "$resp" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Parse pending count
        id: parse
        run: |
          echo "$RESP" >/tmp/resp.json || true
        env:
          RESP: ${{ steps.stats.outputs.resp }}

      - name: Process email queue stats
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const resp = (process.env.RESP || '').trim();
            
            if (!resp) {
              core.setFailed('No response from email stats endpoint');
              return;
            }
            
            core.info(`Raw response length: ${resp.length} characters`);
            
            let obj = null;
            try { 
              obj = JSON.parse(resp); 
            } catch (e) { 
              core.error(`JSON parsing failed: ${e.message}`);
              core.error(`Response preview: ${resp.substring(0, 200)}...`);
              
              // Check for common error patterns
              if (resp.includes('<!doctype') || resp.includes('<html')) {
                core.error('üö® CONFIGURATION ERROR: APP_URL points to frontend instead of backend API');
                core.error('üí° Fix: Update APP_URL secret to your backend API endpoint');
                core.error('   Example: https://api.yourdomain.com (not https://yourdomain.com)');
                core.setFailed('APP_URL configuration error - receiving HTML instead of JSON');
              } else if (resp.includes('curl_failed')) {
                core.warning('curl failed to fetch email stats - connectivity issue');
                core.warning('This may be due to SSL certificate mismatch or network issues');
              } else {
                core.setFailed(`Invalid JSON response: ${e.message}`);
              }
              return; 
            }
            
            // Handle structured error responses
            if (obj?.error) {
              const errorType = obj.error;
              const errorMessage = obj.message || 'Unknown error';
              
              switch (errorType) {
                case 'html_response':
                  core.error('üö® CONFIGURATION ERROR: Endpoint returned HTML instead of JSON');
                  core.error('üí° Solutions:');
                  core.error('   1. Update APP_URL to point to backend API, not frontend');
                  core.error('   2. Ensure /admin/email-queue-stats endpoint exists');
                  core.error('   3. Verify ADMIN_API_SECRET is correct');
                  core.setFailed('APP_URL misconfiguration - HTML response detected');
                  break;
                  
                case 'curl_failed':
                  core.warning(`curl failed: ${errorMessage}`);
                  core.warning('Check network connectivity and SSL certificates');
                  break;
                  
                case 'empty_response':
                  core.warning('Empty response from endpoint - API may be down');
                  break;
                  
                case 'invalid_json':
                  core.warning(`Invalid JSON response: ${errorMessage}`);
                  if (obj.raw_response) {
                    core.warning(`Raw response: ${obj.raw_response}`);
                  }
                  break;
                  
                default:
                  core.warning(`Unknown error type: ${errorType} - ${errorMessage}`);
              }
              
              // Don't fail workflow for monitoring issues, just warn
              return;
            }
            
            // Process successful response
            const pending = obj?.counts?.pending || 0;
            const threshold = 5; // Create issue if > 5 pending
            
            core.info(`Email queue status: ${pending} pending items (threshold: ${threshold})`);
            
            if (pending > threshold) {
              const title = `[Alert] Email queue backlog: ${pending} pending items`;
              const body = `Email queue stats exceeded threshold (${threshold}).\n\n**üìä Current Stats:**\n\n\`\`\`json\n${JSON.stringify(obj, null, 2)}\n\`\`\`\n\n**‚ö° Action Required:**\n- Check email worker processes\n- Review email service configuration\n- Monitor for continued backlog growth\n\n---\n*Generated by email queue monitoring workflow*`;
              
              try {
                await github.rest.issues.create({ 
                  owner: context.repo.owner, 
                  repo: context.repo.repo, 
                  title, 
                  body, 
                  labels: ['alert', 'email-queue', 'high-priority'] 
                });
                core.notice(`üö® Created alert issue for backlog: ${pending} pending items`);
              } catch (issueError) {
                core.error(`Failed to create GitHub issue: ${issueError.message}`);
              }
            } else {
              core.info(`‚úÖ Email queue healthy: ${pending} pending items (within threshold)`);
            }
            
            // Log additional stats if available
            if (obj.counts) {
              const stats = obj.counts;
              core.info(`Queue details - Pending: ${stats.pending || 0}, Sent: ${stats.sent || 0}, Failed: ${stats.failed || 0}`);
            }
            
        env:
          RESP: ${{ steps.stats.outputs.resp }}
