name: Build and deploy frontend to VM

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      CI: false  # Treat warnings as warnings, not errors
      NODE_ENV: production
      # Set placeholder values to prevent build-time warnings
      REACT_APP_SUPABASE_URL: "placeholder-url"
      REACT_APP_SUPABASE_ANON_KEY: "placeholder-key"
      # Increase memory for Node.js build process
      NODE_OPTIONS: "--max_old_space_size=4096"
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: 'npm'
          cache-dependency-path: rpa-system/rpa-dashboard/package-lock.json

      - name: Install dependencies
        working-directory: rpa-system/rpa-dashboard
        run: |
          echo "Installing dependencies..."
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          
          # Clean install with retries
          if ! npm ci --prefer-offline --no-audit; then
            echo "npm ci failed, trying with cache clear..."
            npm cache clean --force
            npm ci --prefer-offline --no-audit
          fi
          
          echo "Dependencies installed successfully"
          
          # Verify react-app-rewired installation
          echo "=== Dependency verification ==="
          if [ -f node_modules/.bin/react-app-rewired ]; then
            echo "✅ react-app-rewired binary found"
            ls -la node_modules/.bin/react-app-rewired
          else
            echo "❌ react-app-rewired binary NOT found"
            echo "Checking if package is installed..."
            npm list react-app-rewired || echo "react-app-rewired not found in dependencies"
            
            # Force install if missing
            echo "Force installing react-app-rewired..."
            npm install react-app-rewired@^2.2.1 --save-dev --no-package-lock
          fi
          
          # Check other critical dependencies
          echo "=== Critical dependencies check ==="
          for pkg in "react-scripts" "customize-cra"; do
            if npm list $pkg >/dev/null 2>&1; then
              echo "✅ $pkg found"
            else
              echo "⚠️ $pkg missing"
            fi
          done
          
      - name: Pre-build checks
        working-directory: rpa-system/rpa-dashboard
        run: |
          echo "=== Pre-build diagnostics ==="
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "Working directory: $(pwd)"
          echo "Package.json scripts:"
          cat package.json | jq '.scripts'
          echo "Checking for config-overrides.js:"
          ls -la config-overrides.js || echo "No config-overrides.js found"
          echo "node_modules existence:"
          ls -la node_modules/ | head -5
          
      - name: Build frontend
        working-directory: rpa-system/rpa-dashboard
        run: |
          echo "=== Starting build process ==="
          
          # Check if react-app-rewired is available
          if command -v react-app-rewired >/dev/null 2>&1 || [ -f node_modules/.bin/react-app-rewired ]; then
            echo "✅ react-app-rewired available"
            BUILD_CMD="npm run build"
          else
            echo "❌ react-app-rewired not found, using react-scripts fallback"
            BUILD_CMD="npx react-scripts build"
          fi
          
          echo "Build command: $BUILD_CMD"
          
          # Execute the build
          if $BUILD_CMD 2>&1 | tee build.log; then
            echo "✅ Build successful with: $BUILD_CMD"
          else
            build_exit_code=$?
            echo "❌ Build failed with: $BUILD_CMD (exit code: $build_exit_code)"
            
            # Show build log for debugging
            echo "=== Build log ==="
            cat build.log || echo "No build log available"
            
            # Try alternative build methods
            if [[ "$BUILD_CMD" == *"react-app-rewired"* ]]; then
              echo "🔄 Trying fallback with react-scripts..."
              if npx react-scripts build 2>&1 | tee build-fallback.log; then
                echo "✅ Fallback build successful with react-scripts!"
              else
                echo "❌ Both build methods failed!"
                echo "=== Fallback build log ==="
                cat build-fallback.log || echo "No fallback build log available"
                exit 1
              fi
            else
              echo "❌ Build failed and no fallback available"
              exit $build_exit_code
            fi
          fi
          
          # Verify build output
          if [ -d build ] && [ -f build/index.html ]; then
            echo "✅ Build verification passed"
          else
            echo "❌ Build verification failed - missing build directory or index.html"
            echo "Current directory contents:"
            ls -la
            exit 1
          fi
          
      - name: Post-build verification
        working-directory: rpa-system/rpa-dashboard
        run: |
          echo "=== Post-build verification ==="
          if [ ! -d build ]; then
            echo "ERROR: Build directory not found!"
            echo "Current directory contents:"
            ls -la
            echo "Build log:"
            cat build.log || echo "No build log found"
            exit 1
          fi
          
          echo "Build directory found. Contents:"
          ls -la build/
          
          if [ ! -f build/index.html ]; then
            echo "ERROR: build/index.html not found!"
            echo "Build directory contents:"
            find build -type f | head -20
            exit 1
          fi
          
          echo "Build verification successful!"
          echo "Built files:"
          find build -name "*.js" -o -name "*.css" -o -name "*.html" | head -10

      - name: Archive build
        run: |
          echo "=== Creating build archive ==="
          if [ ! -d rpa-system/rpa-dashboard/build ]; then
            echo "ERROR: Build directory not found. Did the build step succeed?" >&2
            echo "Current directory structure:"
            find rpa-system/rpa-dashboard -maxdepth 2 -type d
            exit 1
          fi
          
          echo "Creating tar archive..."
          tar -czf rpa-dashboard-build.tar.gz -C rpa-system/rpa-dashboard build
          echo "Archive created successfully"
          
          echo "Archive size: $(du -h rpa-dashboard-build.tar.gz)"
          echo "Testing archive integrity..."
          tar -tzf rpa-dashboard-build.tar.gz | head -10

      - name: Verify build archive
        run: |
          echo "=== Verifying build archive ==="
          if [ ! -f rpa-dashboard-build.tar.gz ]; then
            echo "ERROR: rpa-dashboard-build.tar.gz not found. Archive step failed." >&2
            echo "Files in current directory:"
            ls -la
            exit 1
          fi
          
          echo "Archive verification successful!"
          echo "Archive details:"
          ls -lh rpa-dashboard-build.tar.gz

      - name: Copy files to VM
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: rpa-dashboard-build.tar.gz
          target: ./
          overwrite: true
          debug: true

      - name: Deploy to VM
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -e
            echo "=== Starting deployment on VM ==="
            
            # Check if archive exists
            if [ ! -f ~/rpa-dashboard-build.tar.gz ]; then
              echo "ERROR: rpa-dashboard-build.tar.gz not found on VM"
              echo "Files in home directory:"
              ls -la ~/
              exit 1
            fi
            
            echo "Archive found, extracting..."
            rm -rf /tmp/build || true
            tar -xzf ~/rpa-dashboard-build.tar.gz -C /tmp
            
            # Verify extraction
            if [ ! -f /tmp/build/index.html ]; then
              echo "ERROR: /tmp/build/index.html not found after extraction"
              echo "Extracted contents:"
              find /tmp -name "build" -type d -exec ls -la {} \;
              echo "Archive contents:"
              tar -tzf ~/rpa-dashboard-build.tar.gz | head -20
              exit 1
            fi
            
            echo "Extraction successful, deploying files..."
            echo "Current /var/www/easyflow-app contents:"
            sudo ls -la /var/www/easyflow-app/ || echo "Directory doesn't exist yet"
            
            # Backup current deployment
            if [ -d /var/www/easyflow-app ] && [ "$(sudo ls -A /var/www/easyflow-app)" ]; then
              sudo mkdir -p /var/www/backups
              sudo cp -r /var/www/easyflow-app /var/www/backups/easyflow-app-$(date +%Y%m%d-%H%M%S) || true
            fi
            
            # Deploy new files
            sudo rm -rf /var/www/easyflow-app/* || true
            sudo cp -a /tmp/build/. /var/www/easyflow-app/
            sudo chown -R www-data:www-data /var/www/easyflow-app
            
            echo "Files deployed successfully!"
            echo "Deployed files:"
            sudo ls -la /var/www/easyflow-app/ | head -10
            
            # Test nginx configuration and reload
            echo "Testing nginx configuration..."
            sudo nginx -t
            echo "Reloading nginx..."
            sudo systemctl reload nginx
            echo "Nginx reloaded successfully"
            
            # Cleanup
            rm -f ~/rpa-dashboard-build.tar.gz
            rm -rf /tmp/build
            
            echo "=== Deployment completed successfully! ==="
