name: QA â€” core feature tests

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  qa:
    runs-on: ubuntu-latest
    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
      SUPABASE_SERVICE_ROLE: ${{ secrets.SUPABASE_SERVICE_ROLE }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Create backend .env file from secrets
        run: |
          mkdir -p rpa-system/backend
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> rpa-system/backend/.env
          echo "REDIS_URL=${{ secrets.REDIS_URL }}" >> rpa-system/backend/.env
          echo "KAFKA_BROKERS=${{ secrets.KAFKA_BROKERS }}" >> rpa-system/backend/.env
          echo "AUTOMATION_URL=${{ secrets.AUTOMATION_URL }}" >> rpa-system/backend/.env
          echo "ALLOW_DRAFT_EXECUTION=true" >> rpa-system/backend/.env

      - name: Start test services (docker-compose)
        working-directory: rpa-system
        run: |
          echo "Starting test services..."
          docker compose -f docker-compose.test.yml up -d

          echo "Waiting for services to be ready..."
          # Wait for PostgreSQL to be ready
          timeout 60s bash -c 'until docker compose -f docker-compose.test.yml exec -T postgres pg_isready -U postgres -d testdb; do sleep 2; done'

          # Wait for backend to be ready
          timeout 60s bash -c 'until curl -f http://localhost:3030/api/health >/dev/null 2>&1; do sleep 2; done' || echo "Backend health check timeout (continuing anyway)"

          echo "Services are ready!"
          docker compose -f docker-compose.test.yml ps

      - name: Install backend deps
        working-directory: rpa-system
        run: npm ci

      - name: Run backend unit tests
        working-directory: rpa-system
        run: npm run test:backend --silent

      - name: Install dashboard deps
        working-directory: rpa-system/rpa-dashboard
        run: npm ci

      - name: Run dashboard lint
        working-directory: rpa-system/rpa-dashboard
        run: |
          npx eslint src --ext .js,.jsx || true

      - name: Run dashboard tests
        working-directory: rpa-system/rpa-dashboard
        run: |
          # run tests once (CI mode)
          CI=true npm test --silent -- --watchAll=false || true

      - name: Run integration scripts
        working-directory: rpa-system
        run: |
          node backend/referral_integration.js || true
          node backend/scripts/test_event_forwarder.js || true

      - name: Set up Python (automation)
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Run Python automation tests
        working-directory: rpa-system/automation
        run: |
          pip install -r ../requirements.txt
          pip install pytest selenium requests
          pytest test_core_features.py -v || true
          pytest test_automate.py -v || true

      - name: Collect logs
        run: |
          mkdir -p artifacts
          docker compose -f rpa-system/docker-compose.test.yml logs --no-color > artifacts/service-logs.txt || true
        working-directory: ${{ github.workspace }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: qa-artifacts
          path: artifacts
