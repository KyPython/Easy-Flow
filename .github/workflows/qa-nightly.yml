name: QA â€” Nightly Full Test Suite

on:
  schedule:
    - cron: "0 3 * * *" # Daily at 3 AM UTC
  workflow_dispatch:
    inputs:
      test_type:
        description: "Test type to run"
        required: true
        default: "full"
        type: choice
        options:
          - full
          - performance
          - security
          - integration

jobs:
  nightly-qa:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      contents: read
      issues: write

    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
      SUPABASE_SERVICE_ROLE: ${{ secrets.SUPABASE_SERVICE_ROLE }}
      CI: true
      NODE_ENV: test

    strategy:
      matrix:
        node-version: [20, 22]
        python-version: [3.11, 3.12]
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          cache-dependency-path: |
            rpa-system/package-lock.json
            rpa-system/backend/package-lock.json
            rpa-system/rpa-dashboard/package-lock.json

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y chromium-browser chromium-chromedriver postgresql-client

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-

      - name: Create backend .env file from secrets
        run: |
          mkdir -p rpa-system/backend
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> rpa-system/backend/.env
          echo "REDIS_URL=${{ secrets.REDIS_URL }}" >> rpa-system/backend/.env
          echo "KAFKA_BROKERS=${{ secrets.KAFKA_BROKERS }}" >> rpa-system/backend/.env
          echo "AUTOMATION_URL=${{ secrets.AUTOMATION_URL }}" >> rpa-system/backend/.env
          echo "ALLOW_DRAFT_EXECUTION=true" >> rpa-system/backend/.env

      - name: Start test services (docker-compose)
        working-directory: rpa-system
        run: |
          echo "Starting test services..."
          docker compose -f docker-compose.test.yml up -d

          echo "Waiting for services to be ready..."
          # Wait for PostgreSQL to be ready
          timeout 60s bash -c 'until docker compose -f docker-compose.test.yml exec -T postgres pg_isready -U postgres -d testdb; do sleep 2; done'

          # Wait for backend to be ready
          timeout 60s bash -c 'until curl -f http://localhost:3030/api/health >/dev/null 2>&1; do sleep 2; done' || echo "Backend health check timeout (continuing anyway)"

          echo "Services are ready!"
          docker compose -f docker-compose.test.yml ps

      - name: Install backend deps
        working-directory: rpa-system
        run: npm ci

      - name: Run backend unit tests
        working-directory: rpa-system
        run: npm run test:backend --silent || true

      - name: Install dashboard deps
        working-directory: rpa-system/rpa-dashboard
        run: npm ci

      - name: Run dashboard lint
        working-directory: rpa-system/rpa-dashboard
        run: npx eslint src --ext .js,.jsx || true

      - name: Run dashboard tests
        working-directory: rpa-system/rpa-dashboard
        env:
          CI: true
          CHROME_BIN: /usr/bin/chromium-browser
          CHROMEDRIVER_PATH: /usr/bin/chromedriver
        run: npm test --silent -- --watchAll=false || true

      - name: Run extended performance tests
        if: ${{ github.event.inputs.test_type == 'full' || github.event.inputs.test_type == 'performance' }}
        working-directory: rpa-system
        run: |
          npm run test:backend -- --testNamePattern="Performance" --verbose

      - name: Run security audit
        if: ${{ github.event.inputs.test_type == 'full' || github.event.inputs.test_type == 'security' }}
        run: |
          npm audit --audit-level=moderate || true
          cd rpa-system && npm audit --audit-level=moderate || true
          cd rpa-system/rpa-dashboard && npm audit --audit-level=moderate || true

      - name: Run dependency vulnerability check
        if: ${{ github.event.inputs.test_type == 'full' || github.event.inputs.test_type == 'security' }}
        working-directory: rpa-system/automation
        run: |
          pip install safety
          safety check || true

      - name: Generate test coverage report
        if: ${{ github.event.inputs.test_type == 'full' }}
        run: |
          cd rpa-system
          npm run test:backend -- --coverage --coverageReporters=lcov
          cd rpa-dashboard
          CI=true npm test -- --coverage --watchAll=false --coverageReporters=lcov

      - name: Upload coverage to Codecov
        if: ${{ github.event.inputs.test_type == 'full' }}
        uses: codecov/codecov-action@v3
        with:
          directory: ./rpa-system
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Run load testing
        if: ${{ github.event.inputs.test_type == 'full' || github.event.inputs.test_type == 'performance' }}
        working-directory: rpa-system
        run: |
          npm install -g artillery@latest
          # Create a simple load test if artillery config exists
          if [ -f "load-test.yml" ]; then
            artillery run load-test.yml || true
          fi

      - name: Collect comprehensive logs
        if: always()
        run: |
          mkdir -p nightly-artifacts

          # System information
          echo "=== System Info ===" > nightly-artifacts/system-info.txt
          uname -a >> nightly-artifacts/system-info.txt
          node --version >> nightly-artifacts/system-info.txt
          npm --version >> nightly-artifacts/system-info.txt
          python3 --version >> nightly-artifacts/system-info.txt

          # Docker logs if available
          docker compose -f rpa-system/docker-compose.test.yml logs --no-color > nightly-artifacts/docker-logs.txt 2>/dev/null || true

          # Test results
          find . -name "*.log" -o -name "test-results*" -o -name "coverage" -type d | while read -r file; do
            if [ -f "$file" ]; then
              cp "$file" nightly-artifacts/ 2>/dev/null || true
            elif [ -d "$file" ]; then
              cp -r "$file" nightly-artifacts/ 2>/dev/null || true
            fi
          done

      - name: Upload nightly artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: nightly-qa-artifacts-node${{ matrix.node-version }}-py${{ matrix.python-version }}
          path: nightly-artifacts/
          retention-days: 14

      - name: Create GitHub Issue for Test Failures
        if: failure() && github.ref == 'refs/heads/main'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const title = `[QA Alert] Nightly Test Failure - Node ${{ matrix.node-version }}, Python ${{ matrix.python-version }}`;
            const body = `ðŸš¨ **Nightly QA Test Suite Failed**

            **Details:**
            - **Workflow:** ${{ github.workflow }}
            - **Run:** ${{ github.run_number }}
            - **Commit:** ${{ github.sha }}
            - **Author:** ${{ github.actor }}
            - **Node Version:** ${{ matrix.node-version }}
            - **Python Version:** ${{ matrix.python-version }}
            - **Test Type:** ${{ github.event.inputs.test_type || 'full' }}

            **ðŸ“‹ Actions Taken:**
            - âœ… Test artifacts uploaded for analysis
            - âœ… Coverage reports generated
            - âœ… System logs collected

            **ðŸ”§ Next Steps:**
            1. Review the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            2. Download and analyze the test artifacts
            3. Check recent commits for potential causes
            4. Fix identified issues and re-run tests

            **ðŸ“Š Artifact Information:**
            - **Artifact Name:** nightly-qa-artifacts-node${{ matrix.node-version }}-py${{ matrix.python-version }}
            - **Retention:** 14 days
            - **Contents:** Logs, coverage reports, system info

            ---
            *This issue was automatically created by the nightly QA workflow*`;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['qa-failure', 'nightly-tests', 'high-priority', 'automated']
            });

      - name: Cleanup
        if: always()
        run: |
          docker system prune -f || true
          docker compose -f rpa-system/docker-compose.test.yml down -v || true
