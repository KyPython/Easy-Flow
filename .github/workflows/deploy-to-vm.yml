name: Deploy to VM

on:
  push:
    branches: [main]

env:
  TAR_FILE: rpa-system.tar.gz
  VM_HOST: ${{ secrets.VM_HOST }}
  VM_USER: ${{ secrets.VM_USER }}
  SSH_PORT: ${{ secrets.SSH_PORT }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node 20
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install root dependencies
        run: npm ci

      - name: Build frontend
        working-directory: rpa-system/rpa-dashboard
        run: |
          npm ci
          npm run build

      - name: Package rpa-system
        run: |
          rm -f /tmp/${{ env.TAR_FILE }} || true
          tar -czf /tmp/${{ env.TAR_FILE }} \
            --exclude='rpa-system/node_modules' \
            --exclude='rpa-system/rpa-dashboard/node_modules' \
            --exclude='rpa-system/downloads' \
            --exclude='rpa-system/.git' \
            --exclude='rpa-system/**/.env*' \
            rpa-system

      - name: Prepare SSH deploy key
        env:
          DEPLOY_SSH_KEY: ${{ secrets.DEPLOY_SSH_KEY }}
        run: |
          if [ -z "$DEPLOY_SSH_KEY" ]; then echo 'Missing DEPLOY_SSH_KEY secret' && exit 1; fi
          mkdir -p ~/.ssh
          echo "$DEPLOY_SSH_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          touch ~/.ssh/known_hosts
          if [ -n "${{ env.VM_HOST }}" ]; then
            ssh-keyscan -H "${{ env.VM_HOST }}" >> ~/.ssh/known_hosts
          fi

      - name: Add SSH known host
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.VM_HOST }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Emergency disk cleanup and space check
        run: |
          PORT_OPT=''
          if [ -n "${{ env.SSH_PORT }}" ]; then PORT_OPT="-p ${{ env.SSH_PORT }}"; fi
          
          echo "Performing emergency disk cleanup on remote server..."
          ssh -i ~/.ssh/deploy_key $PORT_OPT -o StrictHostKeyChecking=yes "${{ env.VM_USER }}@${{ env.VM_HOST }}" <<'EOF'
            set -e
            echo "=== BEFORE CLEANUP ==="
            df -h /
            
            echo "=== CLEANING SYSTEM FILES ==="
            
            # Clean package cache
            sudo apt-get clean || true
            
            # Remove old logs (keep last 7 days)
            sudo find /var/log -name "*.log" -type f -mtime +7 -delete 2>/dev/null || true
            sudo find /var/log -name "*.gz" -type f -mtime +7 -delete 2>/dev/null || true
            
            # Clean journal logs (keep last 3 days)
            sudo journalctl --vacuum-time=3d 2>/dev/null || true
            
            # Remove temp files older than 1 day
            sudo find /tmp -type f -mtime +1 -delete 2>/dev/null || true
            
            # Remove old deployment files
            rm -f /tmp/rpa-system.tar.gz* 2>/dev/null || true
            rm -rf /tmp/build 2>/dev/null || true
            
            # Clean Docker if installed (remove unused images/containers)
            if command -v docker >/dev/null 2>&1; then
              sudo docker system prune -f 2>/dev/null || true
            fi
            
            # Remove old node_modules if any exist in temp
            find /tmp -name "node_modules" -type d -exec rm -rf {} + 2>/dev/null || true
            
            echo "=== AFTER CLEANUP ==="
            df -h /
            
            # Check if we have at least 500MB free
            AVAILABLE_KB=$(df / | awk 'NR==2 {print $4}')
            AVAILABLE_MB=$((AVAILABLE_KB / 1024))
            echo "Available space: ${AVAILABLE_MB}MB"
            
            if [ "$AVAILABLE_MB" -lt 500 ]; then
              echo "⚠️ WARNING: Still less than 500MB available after cleanup!"
              echo "=== LARGEST FILES/DIRECTORIES ==="
              sudo du -h / 2>/dev/null | sort -rh | head -20 || true
              echo "Manual cleanup may be required on the server."
              exit 1
            else
              echo "✅ Sufficient space available for deployment (${AVAILABLE_MB}MB)"
            fi
          EOF

      - name: Copy package to VM
        run: |
          if [ -z "${{ env.VM_HOST }}" ] || [ -z "${{ env.VM_USER }}" ]; then 
            echo 'Missing VM_HOST or VM_USER secrets' && exit 1
          fi
          
          PORT_OPT=''
          if [ -n "${{ env.SSH_PORT }}" ]; then PORT_OPT="-P ${{ env.SSH_PORT }}"; fi
          
          echo "Copying deployment package to VM..."
          echo "Local file size: $(ls -lh /tmp/${{ env.TAR_FILE }})"
          
          if ! scp -i ~/.ssh/deploy_key $PORT_OPT -o StrictHostKeyChecking=yes -v /tmp/${{ env.TAR_FILE }} "${{ env.VM_USER }}@${{ env.VM_HOST }}:/tmp/${{ env.TAR_FILE }}"; then
            echo "SCP failed. Checking remote server status..."
            ssh -i ~/.ssh/deploy_key ${PORT_OPT/-P/-p} -o StrictHostKeyChecking=yes "${{ env.VM_USER }}@${{ env.VM_HOST }}" 'df -h /tmp && ls -la /tmp/ | head -10'
            exit 1
          fi
          
          echo "Verifying uploaded file..."
          ssh -i ~/.ssh/deploy_key ${PORT_OPT/-P/-p} -o StrictHostKeyChecking=yes "${{ env.VM_USER }}@${{ env.VM_HOST }}" "ls -lh /tmp/${{ env.TAR_FILE }}"

      - name: Run remote deploy
        run: |
          PORT_OPT=''
          if [ -n "${{ env.SSH_PORT }}" ]; then PORT_OPT="-p ${{ env.SSH_PORT }}"; fi
          ssh -i ~/.ssh/deploy_key $PORT_OPT -o StrictHostKeyChecking=yes "${{ env.VM_USER }}@${{ env.VM_HOST }}" <<'EOF'
            set -euo pipefail
            if [ -f /tmp/rpa-system.tar.gz ]; then
              sudo rm -rf ~/rpa-system
              sudo tar -xzf /tmp/rpa-system.tar.gz -C ~
            fi
            cd ~/rpa-system
            sudo chmod +x ./deploy.sh
            sudo ./deploy.sh
            echo "deploy finished"
          EOF
