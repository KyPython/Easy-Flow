const express = require('express');
const router = express.Router();
const { createClient } = require('@supabase/supabase-js');
const { enqueueEvent } = require('./event_forwarder');

// You may need to initialize supabase here if it was missing
const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

// 1. User submits an email-based referral
router.post('/generate-referral', async (req, res) => {
  try {
    const { referrerEmail, referredEmail } = req.body;
    if (!referrerEmail || !referredEmail) {
      return res.status(400).json({ error: 'Both referrer and referred emails are required.' });
    }

    // Check if the referred email already belongs to a user in the system using the 'profiles' table.
    const { data: existingUser, error: userCheckError } = await supabase
      .from('profiles')
      .select('id')
      .eq('email', referredEmail)
      .maybeSingle();

    if (userCheckError) throw userCheckError;
    if (existingUser) {
      return res.status(400).json({ error: 'This person is already a user.' });
    }

    // Find the referrer's profile to get their user ID.
    const { data: referrer, error: refError } = await supabase
      .from('profiles')
      .select('id')
      .eq('email', referrerEmail)
      .maybeSingle();
    if (refError) throw refError;
    const ownerUserId = referrer ? referrer.id : null;

    // Save referral record. The 'code' will be auto-generated by the database trigger.
    const { error: insertError } = await supabase.from('referrals').insert([{
      owner_user_id: ownerUserId,
      metadata: {
        referrer_email: referrerEmail,
        referred_email: referredEmail,
        source: 'email_invite'
      }
    }]); // status will default to 'pending'
    if (insertError) throw insertError;

    // Enqueue emails with correct columns (add timestamps and attempts to satisfy DB NOT NULL constraints)
    const now = new Date().toISOString();
    const emailsToEnqueue = [
      {
        to_email: referrerEmail,
        template: 'referral_confirmation',
        data: { referredEmail },
        status: 'pending',
        scheduled_at: now,
        created_at: now,
        updated_at: now,
        attempts: 0
      },
      {
        to_email: referredEmail,
        template: 'referral_invite',
        data: { referrerEmail },
        status: 'pending',
        scheduled_at: now,
        created_at: now,
        updated_at: now,
        attempts: 0
      }
    ];
    const { error: emailError } = await supabase.from('email_queue').insert(emailsToEnqueue);
    if (emailError) throw emailError;

    res.json({ ok: true, message: 'Referral processed and emails have been queued for sending.' });
  } catch (e) {
    console.error('[POST /api/generate-referral] error', e);
    return res.status(500).json({ error: 'An unexpected error occurred while processing the referral.' });
  }
});

// New route for generating a referral code
router.post('/generate-referral-code', async (req, res) => {
  try {
    // The auth middleware (in index.js) ensures req.user is present.
    if (!req.user || !req.user.id) return res.status(401).json({ error: 'Authentication required.' });

    // Insert a new referral record; the 'code' will be auto-generated by the database trigger.
    const { data: newReferral, error } = await supabase.from('referrals').insert([{
      owner_user_id: req.user.id,
      metadata: {
        referrer_email: req.user.email
      }
    }]).select('code').single(); // Select the newly generated code to return it

    if (error) throw error;
    if (!newReferral?.code) throw new Error('Failed to generate referral code from database.');
    
    const url = `${process.env.APP_PUBLIC_URL || 'http://localhost:3000'}/auth?ref=${newReferral.code}`;
    return res.json({ ok: true, code: newReferral.code, url });
  } catch (e) {
    console.error('[POST /api/generate-referral-code] error', e?.message || e);
    return res.status(500).json({ error: 'An unexpected error occurred.' });
  }
});

// 2. When a new user signs up, check if they were referred (by email or code)
// Call this logic from your signup handler:
async function handleReferralOnSignup(newUserEmail, referralCode = null) {
  // First, find the new user's ID
  const { data: newUser, error: newUserError } = await supabase
    .from('profiles')
    .select('id, email')
    .eq('email', newUserEmail)
    .maybeSingle();

  if (newUserError || !newUser) {
    console.error('[handleReferralOnSignup] Error finding new user:', newUserError?.message || 'New user not found');
    return;
  }
  
  // Find referral by email or code
  const { data: referral, error: findError } = await supabase
    .from('referrals')
    .select('*')
    .or(
      `metadata->>referred_email.eq.${newUserEmail},code.eq.${referralCode}`
    )
    .maybeSingle();

  if (findError) {
    console.error('[handleReferralOnSignup] Error finding referral:', findError.message);
    return;
  }

  if (referral) {
    // Mark referral as complete by updating the status and the referred user's ID
    await supabase
      .from('referrals')
      .update({
        status: 'completed',
        redeemed_by_user_id: newUser.id,
        metadata: {
          ...referral.metadata,
          completed: true,
          completed_at: new Date().toISOString()
        }
      })
      .eq('id', referral.id);

    // Credit referrer: extend their subscription by 1 month
    if (referral.owner_user_id) {
      // Fetch the referrer's current active subscription
      const { data: subscription, error: subError } = await supabase
        .from('subscriptions')
        .select('id, expires_at')
        .eq('user_id', referral.owner_user_id)
        .eq('status', 'active')
        .maybeSingle();

      if (subError) {
        console.error(`[handleReferral] Error fetching subscription for referrer ${referral.owner_user_id}:`, subError.message);
        return;
      }

      if (subscription) {
        // Calculate the new expiration date by adding 30 days to the current one
        const currentExpiresAt = new Date(subscription.expires_at);
        const newExpiresAt = new Date(currentExpiresAt.setDate(currentExpiresAt.getDate() + 30));

        // Update the subscription with the new expiration date
        await supabase
          .from('subscriptions')
          .update({ expires_at: newExpiresAt.toISOString() })
          .eq('id', subscription.id);
      }
    }
  }
}

// when referral is created/updated, enqueue forwarding:
function forwardReferralEvent(referral, action = 'created') {
  const target = process.env.REFERRAL_WEBHOOK_URL;
  if (!target) return;
  enqueueEvent({
    id: `referral:${referral.id}:${action}`,
    url: target,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    body: { action, referral }
  });
}

module.exports = { router, handleReferralOnSignup };