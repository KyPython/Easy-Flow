version: "3.8"

# Staging Environment Configuration
# Usage: docker-compose -f docker-compose.yml -f docker-compose.staging.yml up -d --build

services:
  backend:
    environment:
      - NODE_ENV=staging
      - LOG_LEVEL=debug
      - ENABLE_METRICS=true
      - RATE_LIMIT_ENABLED=true
      - SECURITY_HEADERS=strict
      - CORS_STRICT=true
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:3030/health || curl -fsS http://localhost:3030/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    labels:
      - "environment=staging"
      - "service=backend"
      - "monitoring=enabled"

  automation:
    environment:
      - NODE_ENV=staging
      - LOG_LEVEL=debug
      - ENABLE_PERFORMANCE_MONITORING=true
    labels:
      - "environment=staging"
      - "service=automation"
      - "monitoring=enabled"

  email_worker:
    environment:
      - NODE_ENV=staging
      - LOG_LEVEL=debug
      - EMAIL_WORKER_POLL_MS=3000  # Faster polling for staging
    labels:
      - "environment=staging"
      - "service=email_worker"
      - "monitoring=enabled"

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: easyflow-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - easyflow_network
    labels:
      - "environment=staging"
      - "service=monitoring"

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:10.1.0
    container_name: easyflow-grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=staging_admin_2024
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
      - GF_SERVER_ROOT_URL=http://localhost:3001
    restart: unless-stopped
    networks:
      - easyflow_network
    labels:
      - "environment=staging"
      - "service=monitoring"

  # Redis for caching and rate limiting
  redis:
    image: redis:7.2-alpine
    container_name: easyflow-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    restart: unless-stopped
    networks:
      - easyflow_network
    labels:
      - "environment=staging"
      - "service=cache"

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:v1.6.1
    container_name: easyflow-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    networks:
      - easyflow_network
    labels:
      - "environment=staging"
      - "service=monitoring"

  # Load testing service
  k6-load-tester:
    image: grafana/k6:0.46.0
    container_name: easyflow-k6
    volumes:
      - ./tests/load:/scripts:ro
      - ./tests/results:/results
    environment:
      - TARGET_URL=http://backend:3030
      - K6_PROMETHEUS_RW_SERVER_URL=http://prometheus:9090/api/v1/write
    networks:
      - easyflow_network
    labels:
      - "environment=staging"
      - "service=testing"
    profiles:
      - testing  # Only start when explicitly requested

  # OWASP ZAP for security testing
  zap-security-scanner:
    image: owasp/zap2docker-weekly:latest
    container_name: easyflow-zap
    volumes:
      - ./tests/security:/zap/wrk:rw
    environment:
      - TARGET_URL=http://backend:3030
    networks:
      - easyflow_network
    labels:
      - "environment=staging"
      - "service=security-testing"
    profiles:
      - security-testing  # Only start when explicitly requested

volumes:
  prometheus_data:
  grafana_data:
  redis_data:

networks:
  easyflow_network:
    driver: bridge