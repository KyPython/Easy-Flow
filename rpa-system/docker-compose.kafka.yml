version: '3.8'

services:
  # Zookeeper - Required for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - automation_network
    restart: unless-stopped

  # Kafka Message Broker
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - automation_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka UI for monitoring and management
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: automation-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - automation_network
    restart: unless-stopped

  # Automation Worker 1
  automation-worker-1:
    build:
      context: ./automation
      dockerfile: Dockerfile
    container_name: automation-worker-1
    depends_on:
      - kafka
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_TASK_TOPIC=automation-tasks
      - KAFKA_RESULT_TOPIC=automation-results
      - KAFKA_CONSUMER_GROUP=automation-workers
      - MAX_WORKERS=3
      - HOSTNAME=automation-worker-1
    volumes:
      - ./downloads:/tmp/downloads
    networks:
      - automation_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Automation Worker 2
  automation-worker-2:
    build:
      context: ./automation
      dockerfile: Dockerfile
    container_name: automation-worker-2
    depends_on:
      - kafka
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_TASK_TOPIC=automation-tasks
      - KAFKA_RESULT_TOPIC=automation-results
      - KAFKA_CONSUMER_GROUP=automation-workers
      - MAX_WORKERS=3
      - HOSTNAME=automation-worker-2
    volumes:
      - ./downloads:/tmp/downloads
    networks:
      - automation_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Automation Worker 3
  automation-worker-3:
    build:
      context: ./automation
      dockerfile: Dockerfile
    container_name: automation-worker-3
    depends_on:
      - kafka
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_TASK_TOPIC=automation-tasks
      - KAFKA_RESULT_TOPIC=automation-results
      - KAFKA_CONSUMER_GROUP=automation-workers
      - MAX_WORKERS=3
      - HOSTNAME=automation-worker-3
    volumes:
      - ./downloads:/tmp/downloads
    networks:
      - automation_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: automation-nginx
    depends_on:
      - automation-worker-1
      - automation-worker-2
      - automation-worker-3
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - automation_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Service (Enhanced with Kafka Producer)
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: automation-backend
    depends_on:
      - kafka
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_TASK_TOPIC=automation-tasks
      - KAFKA_RESULT_TOPIC=automation-results
    volumes:
      - ../backend:/app
    networks:
      - automation_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  automation_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.23.0.0/16

volumes:
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local
  kafka_data:
    driver: local
