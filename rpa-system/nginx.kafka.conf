events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Log format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'upstream_addr=$upstream_addr '
                    'upstream_response_time=$upstream_response_time '
                    'request_time=$request_time';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=automation_api:10m rate=10r/s;

    # Upstream configuration for automation workers
    upstream automation_workers {
        least_conn;
        server automation-worker-1:5000 max_fails=3 fail_timeout=30s;
        server automation-worker-2:5000 max_fails=3 fail_timeout=30s;
        server automation-worker-3:5000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # Upstream configuration for backend service
    upstream backend_service {
        server automation-backend:3000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # Main server configuration
    server {
        listen 80;
        server_name localhost;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "nginx healthy\n";
            add_header Content-Type text/plain;
        }

        # Load balancer status
        location /nginx-status {
            access_log off;
            return 200 "nginx load balancer active\n";
            add_header Content-Type text/plain;
        }

        # Proxy to automation workers (legacy API and health checks)
        location /api/automation/ {
            limit_req zone=automation_api burst=20 nodelay;
            
            proxy_pass http://automation_workers/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Buffer settings
            proxy_buffering on;
            proxy_buffer_size 8k;
            proxy_buffers 16 8k;
            
            # Keep alive
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }

        # Direct access to worker health endpoints
        location ~ ^/worker-([1-3])/health$ {
            proxy_pass http://automation-worker-$1:5000/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # Direct access to worker status endpoints
        location ~ ^/worker-([1-3])/status$ {
            proxy_pass http://automation-worker-$1:5000/status;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # Direct access to worker metrics
        location ~ ^/worker-([1-3])/metrics$ {
            proxy_pass http://automation-worker-$1:5000/metrics;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # Proxy to backend service
        location /api/ {
            limit_req zone=automation_api burst=50 nodelay;
            
            proxy_pass http://backend_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Keep alive
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }

        # Static file serving for downloaded files
        location /downloads/ {
            alias /tmp/downloads/;
            autoindex on;
            autoindex_exact_size off;
            autoindex_localtime on;
            expires 1h;
            add_header Cache-Control "public, no-transform";
        }

        # Default error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /50x.html {
            return 500 "Service temporarily unavailable\n";
            add_header Content-Type text/plain;
        }
        
        location = /404.html {
            return 404 "Not found\n";
            add_header Content-Type text/plain;
        }
    }
}
