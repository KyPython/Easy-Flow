events {
    worker_connections 1024;
}

http {
    # Define an upstream for the backend service, using the service name from docker-compose.yml
    upstream backend_server {
        server backend:3030;
    }

    # Default server to catch all un-matched hostnames and requests to the IP address
    server {
        listen 80 default_server;
        server_name _;
        # Return "Connection Closed Without Response" to prevent information leakage
        return 444;
    }

    # Main application server for both frontend and API
    server {
        listen 80;
        # This will serve both the app and the API.
        # You can add more domains here like localhost for local testing.
        server_name easyflow-app.duckdns.org;

        # Security Headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;

        # API location block
        location /api/ {
            # Proxy all requests to the backend service.
            proxy_pass http://backend_server;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Forward the Authorization header to the backend service.
            proxy_set_header Authorization $http_authorization;

            # WebSocket support for things like Supabase Realtime
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            proxy_read_timeout 120s;
            proxy_connect_timeout 120s;
        }

        # Frontend App location block
        location / {
            root /var/www/easyflow-app;
            index index.html;
            try_files $uri $uri/ /index.html;
        }
    }
}